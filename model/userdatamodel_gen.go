// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userdataFieldNames          = builder.RawFieldNames(&Userdata{})
	userdataRows                = strings.Join(userdataFieldNames, ",")
	userdataRowsExpectAutoSet   = strings.Join(stringx.Remove(userdataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userdataRowsWithPlaceHolder = strings.Join(stringx.Remove(userdataFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheYunbossUserdataIdPrefix  = "cache:yunboss:userdata:id:"
	cacheYunbossUserdataTelPrefix = "cache:yunboss:userdata:tel:"
)

type (
	userdataModel interface {
		Insert(ctx context.Context, data *Userdata) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Userdata, error)
		FindOneByTel(ctx context.Context, tel sql.NullString) (*Userdata, error)
		Update(ctx context.Context, data *Userdata) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserdataModel struct {
		sqlc.CachedConn
		table string
	}

	Userdata struct {
		Id           int64          `db:"id"`
		Name         string         `db:"name"`
		Tel          sql.NullString `db:"tel"`
		Uid          sql.NullString `db:"uid"`
		Status       int64          `db:"status"`
		Time         sql.NullString `db:"time"`
		Age          int64          `db:"age"`
		Sex          int64          `db:"sex"`
		Ty           int64          `db:"ty"`
		Level        int64          `db:"level"`
		Head         sql.NullString `db:"head"`
		Pass         sql.NullString `db:"pass"`
		Email        sql.NullString `db:"email"`
		Weixinopenid sql.NullString `db:"weixinopenid"`
		Openid       sql.NullString `db:"openid"`
		CreatedAt    sql.NullTime   `db:"created_at"`
		UpdatedAt    sql.NullTime   `db:"updated_at"`
		DeletedAt    sql.NullTime   `db:"deleted_at"`
	}
)

func newUserdataModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserdataModel {
	return &defaultUserdataModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`userdata`",
	}
}

func (m *defaultUserdataModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	yunbossUserdataIdKey := fmt.Sprintf("%s%v", cacheYunbossUserdataIdPrefix, id)
	yunbossUserdataTelKey := fmt.Sprintf("%s%v", cacheYunbossUserdataTelPrefix, data.Tel)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, yunbossUserdataIdKey, yunbossUserdataTelKey)
	return err
}

func (m *defaultUserdataModel) FindOne(ctx context.Context, id int64) (*Userdata, error) {
	yunbossUserdataIdKey := fmt.Sprintf("%s%v", cacheYunbossUserdataIdPrefix, id)
	var resp Userdata
	err := m.QueryRowCtx(ctx, &resp, yunbossUserdataIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userdataRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserdataModel) FindOneByTel(ctx context.Context, tel sql.NullString) (*Userdata, error) {
	yunbossUserdataTelKey := fmt.Sprintf("%s%v", cacheYunbossUserdataTelPrefix, tel)
	var resp Userdata
	err := m.QueryRowIndexCtx(ctx, &resp, yunbossUserdataTelKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `tel` = ? limit 1", userdataRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, tel); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserdataModel) Insert(ctx context.Context, data *Userdata) (sql.Result, error) {
	yunbossUserdataIdKey := fmt.Sprintf("%s%v", cacheYunbossUserdataIdPrefix, data.Id)
	yunbossUserdataTelKey := fmt.Sprintf("%s%v", cacheYunbossUserdataTelPrefix, data.Tel)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userdataRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Name, data.Tel, data.Uid, data.Status, data.Time, data.Age, data.Sex, data.Ty, data.Level, data.Head, data.Pass, data.Email, data.Weixinopenid, data.Openid, data.DeletedAt)
	}, yunbossUserdataIdKey, yunbossUserdataTelKey)
	return ret, err
}

func (m *defaultUserdataModel) Update(ctx context.Context, newData *Userdata) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	yunbossUserdataIdKey := fmt.Sprintf("%s%v", cacheYunbossUserdataIdPrefix, data.Id)
	yunbossUserdataTelKey := fmt.Sprintf("%s%v", cacheYunbossUserdataTelPrefix, data.Tel)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userdataRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Name, newData.Tel, newData.Uid, newData.Status, newData.Time, newData.Age, newData.Sex, newData.Ty, newData.Level, newData.Head, newData.Pass, newData.Email, newData.Weixinopenid, newData.Openid, newData.DeletedAt, newData.Id)
	}, yunbossUserdataIdKey, yunbossUserdataTelKey)
	return err
}

func (m *defaultUserdataModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheYunbossUserdataIdPrefix, primary)
}

func (m *defaultUserdataModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userdataRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserdataModel) tableName() string {
	return m.table
}
