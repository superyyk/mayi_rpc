// Code generated by goctl. DO NOT EDIT.
// Source: skill.proto

package skillclient

import (
	"context"

	"mayi/app/skill/rpc/types/skill"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Area            = skill.Area
	GetResponse     = skill.GetResponse
	GetTokenRequest = skill.GetTokenRequest
	Rsp             = skill.Rsp
	SetReq          = skill.SetReq
	SetRsp          = skill.SetRsp
	SkillRequest    = skill.SkillRequest
	TokenRequest    = skill.TokenRequest
	TokenResponse   = skill.TokenResponse

	Skill interface {
		GetSkill(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*Rsp, error)
		SetSkill(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRsp, error)
	}

	defaultSkill struct {
		cli zrpc.Client
	}
)

func NewSkill(cli zrpc.Client) Skill {
	return &defaultSkill{
		cli: cli,
	}
}

func (m *defaultSkill) GetSkill(ctx context.Context, in *SkillRequest, opts ...grpc.CallOption) (*Rsp, error) {
	client := skill.NewSkillClient(m.cli.Conn())
	return client.GetSkill(ctx, in, opts...)
}

func (m *defaultSkill) SetSkill(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetRsp, error) {
	client := skill.NewSkillClient(m.cli.Conn())
	return client.SetSkill(ctx, in, opts...)
}
